//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PatientManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HospitalDBEntities : DbContext
    {
        public HospitalDBEntities()
            : base("name=HospitalDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblPatient> tblPatients { get; set; }
    
        public virtual int spCreatePatient(byte[] patImage, string patName, string patContact, Nullable<bool> isActive, Nullable<System.DateTime> entryDate)
        {
            var patImageParameter = patImage != null ?
                new ObjectParameter("patImage", patImage) :
                new ObjectParameter("patImage", typeof(byte[]));
    
            var patNameParameter = patName != null ?
                new ObjectParameter("patName", patName) :
                new ObjectParameter("patName", typeof(string));
    
            var patContactParameter = patContact != null ?
                new ObjectParameter("patContact", patContact) :
                new ObjectParameter("patContact", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("entryDate", entryDate) :
                new ObjectParameter("entryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreatePatient", patImageParameter, patNameParameter, patContactParameter, isActiveParameter, entryDateParameter);
        }
    
        public virtual int spDeletePatient(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeletePatient", idParameter);
        }
    
        public virtual ObjectResult<spGetAllPatient_Result> spGetAllPatient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllPatient_Result>("spGetAllPatient");
        }
    
        public virtual ObjectResult<spGetPatientById_Result> spGetPatientById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPatientById_Result>("spGetPatientById", idParameter);
        }
    
        public virtual int spUpdatePatient(Nullable<int> id, byte[] patImage, string patName, string patContact, Nullable<bool> isActive, Nullable<System.DateTime> entryDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var patImageParameter = patImage != null ?
                new ObjectParameter("patImage", patImage) :
                new ObjectParameter("patImage", typeof(byte[]));
    
            var patNameParameter = patName != null ?
                new ObjectParameter("patName", patName) :
                new ObjectParameter("patName", typeof(string));
    
            var patContactParameter = patContact != null ?
                new ObjectParameter("patContact", patContact) :
                new ObjectParameter("patContact", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("entryDate", entryDate) :
                new ObjectParameter("entryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdatePatient", idParameter, patImageParameter, patNameParameter, patContactParameter, isActiveParameter, entryDateParameter);
        }
    }
}
